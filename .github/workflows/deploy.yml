name: Build and Deploy to Azure Container App

on:
  push:
    branches:
      - main  # Trigger the workflow on push to main branch

jobs:
  terraform:
    name: 'Terraform Production Deployment'
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest    
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      
      - uses: hashicorp/setup-terraform@v3
        
      - name: 'Terraform init'
        id: init
        run: terraform init
        working-directory: terraform

      - name: 'Terraform Format'
        id: fmt
        run: terraform fmt -recursive -check
        working-directory: terraform
        continue-on-error: false
          
      - name: 'Terraform Validate'
        id: validate
        run: terraform validate -no-color
        working-directory: terraform
        continue-on-error: false
      
      - name: 'Terraform Plan'
        id: plan
        run: terraform plan -no-color
        working-directory: terraform
        continue-on-error: false

      - name: 'Terraform apply'
        id: apply
        run: terraform apply --auto-approve
        working-directory: terraform
  
  build-and-deploy:
    name: 'Build and Deploy'
    runs-on: ubuntu-latest
    needs: terraform  # This ensures build-and-deploy runs after terraform

    steps:
      - name: Check out the repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'  # Node version matching your Dockerfile

      - name: Log in to Azure CLI using Service Principal
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to ACR using Azure CLI
        run: |
          az acr login --name ${{ secrets.ACR_NAME }}

      - name: Build and Push Docker Image to ACR
        run: |
          docker build -t ${{ secrets.ACR_NAME }}.azurecr.io/myapp:latest .
          docker push ${{ secrets.ACR_NAME }}.azurecr.io/myapp:latest

      - name: Retrieve Azure Container Apps Environment ID
        id: get-environment-id
        run: |
          environment_id=$(az containerapp env list --resource-group ${{ secrets.RESOURCE_GROUP }} --query "[].id" -o tsv)
          echo "ENVIRONMENT_ID=$environment_id" >> $GITHUB_ENV

      - name: Deploy to Azure Container Apps
        run: |
          az containerapp create \
            --name mycontainerapp \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --image ${{ secrets.ACR_NAME }}.azurecr.io/myapp:latest \
            --target-port 3000 \
            --ingress 'external' \
            --registry-server ${{ secrets.ACR_NAME }}.azurecr.io \
            --registry-identity "system"
